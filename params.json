{"name":"Openstack","tagline":"OpenStack Folsom (with Quantum) Installation Guide","body":"# LAN Switch Configuration\r\n\r\n\r\n\r\n# Controller Node Installation\r\n\r\n## MySQL Database configurations\r\n\r\n`mysql -u root -p`  \r\n`CREATE DATABASE keystone;`  \r\n`GRANT ALL ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON keystone.* TO 'keystone'@'192.168.0.9' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON keystone.* TO 'keystone'@'controller1-01' IDENTIFIED BY 'openstack';`  \r\n\r\n`CREATE DATABASE glance;`  \r\n`GRANT ALL ON glance.* TO 'glance'@'%' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON glance.* TO 'glance'@'192.168.0.9' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON glance.* TO 'glance'@'controller1-01' IDENTIFIED BY 'openstack';`  \r\n\r\n`CREATE DATABASE cinder;`  \r\n`GRANT ALL ON cinder.* TO 'cinder'@'%' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON cinder.* TO 'cinder'@'192.168.0.9' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON cinder.* TO 'cinder'@'controller1-01' IDENTIFIED BY 'openstack';`  \r\n\r\n`CREATE DATABASE quantum;`  \r\n`GRANT ALL ON quantum.* TO 'quantum'@'%' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON quantum.* TO 'quantum'@'localhost' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON quantum.* TO 'quantum'@'192.168.0.9' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON quantum.* TO 'quantum'@'controller1-01' IDENTIFIED BY 'openstack';`  \r\n\r\n`CREATE DATABASE nova;`  \r\n`GRANT ALL ON nova.* TO 'nova'@'%' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON nova.* TO 'nova'@'localhost' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON nova.* TO 'nova'@'192.168.0.9' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON nova.* TO 'nova'@'controller1-01' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON nova.* TO 'nova'@'192.168.0.11' IDENTIFIED BY 'openstack';`  \r\n`GRANT ALL ON nova.* TO 'nova'@'cn1-01' IDENTIFIED BY 'openstack';`  \r\n\r\n\r\n# Network Node Installation\r\n\r\n##Install and configure common services  \r\n***\r\n###Install telnet and SSH support for the compute node\r\n\r\n`apt-get install telnet && apt-get install openssh-server`\r\n\r\n**Upload the latest iproute package and install it using dpkg**  \r\nThis package update is necessary if you want to use process network namespace in future for your quantum configuration\r\n\r\n`dpkg -i iproute_20121211-2_amd64.deb`\r\n\r\n###Include Cloud Archives for Folsom in the system\r\n\r\n`apt-get install ubuntu-cloud-keyring`  \r\n`vi /etc/apt/sources.list.d/cloud-archive.list`  \r\n\r\n`deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/folsom main`  \r\n\r\n###Update the system\r\n\r\n`apt-get update && apt-get dist-upgrade && apt-get upgrade`\r\n\r\n###Install VLAN and Bridge utilities and configure NIC to support multiple networks\r\n\r\n`apt-get install -y vlan bridge-utils`  \r\n`vi /etc/network/interfaces`  \r\n\r\n`# The loopback network interface`  \r\n`auto lo`  \r\n`iface lo inet loopback`  \r\n\r\n`# Management Network (Connected to VLAN 10)`  \r\n`auto eth0`  \r\n`iface eth0 inet static`  \r\n` address 192.168.0.10`  \r\n` netmask 255.255.255.224`  \r\n` gateway 192.168.0.1`  \r\n` dns-nameservers 4.2.2.1 4.2.2.2`  \r\n\r\n`# VM Configuration (Connected to VLAN 101)`  \r\n`auto eth0.101`  \r\n`iface eth0.101 inet static`  \r\n` vlan-raw-device eth0`  \r\n` address 10.0.0.10`  \r\n` netmask 255.255.255.0`  \r\n\r\n`# VM internet Access + OpenStack API (Connected to VLAN 102)`  \r\n`auto eth0.102`  \r\n`iface eth0.102 inet manual`  \r\n` vlan-raw-device eth0`  \r\n` up ifconfig $IFACE 0.0.0.0 up`  \r\n` up ip link set $IFACE promisc on`  \r\n` down ip link set $IFACE promisc off`  \r\n` down ifconfig $IFACE down`  \r\n\r\n###Install and configure NTP  \r\n`apt-get install -y ntp`  \r\n`sed -i 's/server ntp.ubuntu.com/server ntp.ubuntu.com\\nserver 127.127.1.0\\nfudge 127.127.1.0 stratum 10/g' /etc/ntp.conf`  \r\n`service ntp restart`\r\n\r\n###Edit /etc/sysctl.conf to enable IP forwarding and disable source validation  \r\n`vi /etc/sysctl.conf`  \r\n\r\n`net.ipv4.conf.all.rp_filter = 0`  \r\n`net.ipv4.conf.default.rp_filter = 0`  \r\n`net.ipv4.ip_forward=1`  \r\n\r\n_If you do not want to reboot the system then just type_  \r\n`sysctl -p`  \r\n\r\n###Add the below lines to your .bashrc file  \r\n`vi ~/.bashrc`  \r\n\r\n`export OS_TENANT_NAME=ADMIN`  \r\n`export OS_USERNAME=admin`  \r\n`export OS_PASSWORD=openstack`  \r\n`export OS_AUTH_URL=\"http://192.168.0.9:5000/v2.0/\"`  \r\n`export OS_AUTH_STRATEGY=keystone`  \r\n`export SERVICE_TOKEN=ADMIN`  \r\n`export SERVICE_ENDPOINT=http://192.168.0.9:35357/v2.0/`\r\n\r\n###Reboot the system  \r\nIt will be better to reboot the system at this point to make the effects into the configurations  \r\n`reboot`\r\n\r\n##OpenVSwitch Configuration\r\n***  \r\n**Install the required packages**  \r\n`apt-get install -y openvswitch-switch openvswitch-datapath-dkms`  \r\n\r\n**Create the bridges**  \r\n`#br-int will be used for VM integration`  \r\n`ovs-vsctl add-br br-int`  \r\n\r\n`#br-ex is used to make to VM accessible from the internet`  \r\n`ovs-vsctl add-br br-ex`  \r\n`ovs-vsctl add-port br-ex eth102`  \r\n\r\n##Quantum Configuration\r\n***  \r\n###nstall the Quantum openvswitch agent, l3 agent and dhcp agent  \r\n`apt-get -y install quantum-plugin-openvswitch-agent quantum-dhcp-agent quantum-l3-agent`  \r\n\r\n###Edit /etc/quantum/api-paste.ini**  \r\n`vi /etc/quantum/api-paste.ini`  \r\n\r\n`[filter:authtoken]`  \r\n`paste.filter_factory = keystone.middleware.auth_token:filter_factory`  \r\n`auth_host = 192.168.0.9`  \r\n`auth_port = 35357`  \r\n`auth_protocol = http`  \r\n`admin_tenant_name = service`  \r\n`admin_user = quantum`  \r\n`admin_password = openstack`  \r\n\r\n###Edit the OVS plugin configuration file /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini  \r\n`vi /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini`  \r\n\r\n`#Under the database section`  \r\n`[DATABASE]`  \r\n`sql_connection = mysql://quantum:openstack@192.168.0.9/quantum`  \r\n\r\n`#Under the OVS section`  \r\n`[OVS]`  \r\n`tenant_network_type = gre`  \r\n`tunnel_id_ranges = 1:1000`  \r\n`integration_bridge = br-int`  \r\n`tunnel_bridge = br-tun`  \r\n`local_ip = 10.0.0.10`  \r\n`enable_tunneling = True`  \r\n\r\n###In addition, update the /etc/quantum/l3_agent.ini  \r\n`vi /etc/quantum/l3_agent.ini`  \r\n\r\n`auth_url = http://192.168.0.9:35357/v2.0`  \r\n`auth_region = RegionOne`  \r\n`admin_tenant_name = service`  \r\n`admin_user = quantum`  \r\n`admin_password = openstack`  \r\n`metadata_ip = 192.168.0.130`  \r\n`metadata_port = 8775`  \r\n`use_namespaces = False`  \r\n\r\n###Edit /etc/quantum/dhcp_agent.ini**  \r\n`vi /etc/quantum/dhcp_agent.ini`  \r\n\r\n`use_namespaces = False`  \r\n\r\n###Make sure that your RabbitMQ IP in /etc/quantum/quantum.conf is set to the controller node  \r\n`vi /etc/quantum/quantum.conf`  \r\n\r\n`rabbit_host = 192.168.0.9`  \r\n\r\n###Restart all the services  \r\n`service quantum-plugin-openvswitch-agent restart`  \r\n`service quantum-dhcp-agent restart`  \r\n`service quantum-l3-agent restart`  \r\n\r\n# Compute Node Installation\r\n\r\n##Install and configure common services  \r\n***\r\n###Install telnet and SSH support for the compute node\r\n\r\n`apt-get install telnet && apt-get install openssh-server`\r\n\r\n###Upload the latest iproute package and install it using dpkg  \r\nThis package update is necessary if you want to use process network namespace in future for your quantum configuration\r\n\r\n`dpkg -i iproute_20121211-2_amd64.deb`\r\n\r\n###Include Cloud Archives for Folsom in the system\r\n\r\n`apt-get install ubuntu-cloud-keyring`  \r\n`vi /etc/apt/sources.list.d/cloud-archive.list`  \r\n\r\n`deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/folsom main`  \r\n\r\n###Update the system\r\n\r\n`apt-get update && apt-get dist-upgrade && apt-get upgrade`\r\n\r\n###Install VLAN and Bridge utilities and configure NIC to support multiple networks\r\n\r\n`apt-get install -y vlan bridge-utils`  \r\n`vi /etc/network/interfaces`  \r\n\r\n`# The loopback network interface`  \r\n`auto lo`  \r\n`iface lo inet loopback`  \r\n\r\n`# Management Network (Connected to VLAN 10)`  \r\n`auto eth0`  \r\n`iface eth0 inet static`  \r\n` address 192.168.0.11`  \r\n` netmask 255.255.255.224`  \r\n` gateway 192.168.0.1`  \r\n` dns-nameservers 4.2.2.1 4.2.2.2`  \r\n\r\n`# VM Configuration Network (Connected to VLAN 101)`  \r\n`auto eth0.101`  \r\n`iface eth0.101 inet static`  \r\n` vlan-raw-device eth0`  \r\n` address 10.0.0.11`  \r\n` netmask 255.255.255.0`  \r\n\r\n**Install and configure NTP**  \r\n`apt-get install -y ntp`  \r\n`sed -i 's/server ntp.ubuntu.com/server ntp.ubuntu.com\\nserver 127.127.1.0\\nfudge 127.127.1.0 stratum 10/g' /etc/ntp.conf`  \r\n`service ntp restart`\r\n\r\n**Edit /etc/sysctl.conf to enable IP forwarding and disable source validation**  \r\n`vi /etc/sysctl.conf`  \r\n\r\n`net.ipv4.conf.all.rp_filter = 0`  \r\n`net.ipv4.conf.default.rp_filter = 0`  \r\n`net.ipv4.ip_forward=1`  \r\n\r\n_If you do not want to reboot the system then just type_  \r\n`sysctl -p`  \r\n\r\n**Add the below lines to your .bashrc file**  \r\n`vi ~/.bashrc`  \r\n\r\n`export OS_TENANT_NAME=ADMIN`  \r\n`export OS_USERNAME=admin`  \r\n`export OS_PASSWORD=openstack`  \r\n`export OS_AUTH_URL=\"http://192.168.0.9:5000/v2.0/\"`  \r\n`export OS_AUTH_STRATEGY=keystone`  \r\n`export SERVICE_TOKEN=ADMIN`  \r\n`export SERVICE_ENDPOINT=http://192.168.0.9:35357/v2.0/`\r\n\r\n**Reboot the system**  \r\nIt will be better to reboot the system at this point to make the effects into the configurations  \r\n`reboot`\r\n\r\n### Install and configure KVM Hypervisor  \r\n***\r\n**Install the required packages**  \r\n`apt-get install -y kvm libvirt-bin pm-utils`  \r\n\r\n**Configure libvirt**  \r\nEdit /etc/libvirt/qemu.conf file and add :  \r\n`vi /etc/libvirt/qemu.conf`  \r\n\r\n`cgroup_device_acl = [`  \r\n`    \"/dev/null\", \"/dev/full\", \"/dev/zero\",`   \r\n`    \"/dev/random\", \"/dev/urandom\",`  \r\n`    \"/dev/ptmx\", \"/dev/kvm\", \"/dev/kqemu\",`  \r\n`    \"/dev/rtc\", \"/dev/hpet\", \"/dev/net/tun\"]`  \r\n\r\n**Disable KVM default virtual bridge to avoid any confusion**  \r\n`virsh net-destroy default`  \r\n`virsh net-undefine default`  \r\n\r\n**Allow Live Migrations**  \r\nEdit /etc/libvirt/libvirtd.conf file :  \r\n`vi /etc/libvirt/libvirtd.conf`  \r\n\r\n`listen_tls = 0`  \r\n`listen_tcp = 1`  \r\n`auth_tcp = \"none\"`  \r\n\r\n**Modify libvirtd_opts variable in /etc/init/libvirt-bin.conf file**  \r\n`vi /etc/init/libvirt-bin.conf`  \r\n\r\n`env libvirtd_opts=\"-d -l\"`  \r\n\r\n**Edit /etc/default/libvirt-bin file**  \r\n`vi /etc/default/libvirt-bin`  \r\n\r\n`libvirtd_opts=\"-d -l\"`  \r\n\r\n**Restart libvirt**  \r\n`service libvirt-bin restart`  \r\n\r\n###Install and configure OpenVSwitch\r\n***\r\n**Install the openVSwitch**  \r\n`apt-get install -y openvswitch-switch openvswitch-datapath-dkms`  \r\n\r\n**Create the bridges (br-int will be used for VM integration)**  \r\n`ovs-vsctl add-br br-int`  \r\n\r\n###Install the Quantum OpenVSwitch agent\r\n**Install the required packages**  \r\n`apt-get -y install quantum-plugin-openvswitch-agent`  \r\n\r\n**Edit the OVS plugin configuration file /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini with:**  \r\n`vi /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini`  \r\n\r\n`#Under the database section`  \r\n`[DATABASE]`  \r\n`sql_connection = mysql://quantum:openstack@192.168.0.9/quantum`  \r\n\r\n`#Under the OVS section`  \r\n`[OVS]`  \r\n`tenant_network_type = gre`  \r\n`tunnel_id_ranges = 1:1000`  \r\n`integration_bridge = br-int`  \r\n`tunnel_bridge = br-tun`  \r\n`local_ip = 10.0.0.11`  \r\n`enable_tunneling = True`  \r\n\r\n**Make sure that your rabbitMQ IP in /etc/quantum/quantum.conf is set to the controller node:**  \r\n`vi /etc/quantum/quantum.conf`  \r\n\r\n`rabbit_host = 192.168.0.9`  \r\n\r\n**Restart all the services:**  \r\n`service quantum-plugin-openvswitch-agent restart`  \r\n\r\n###Install and configure Nova services\r\n***\r\n**Install the required packages:**  \r\n`apt-get install nova-compute-kvm`  \r\n\r\n**Now modify authtoken section in the /etc/nova/api-paste.ini file to this:**  \r\n`vi /etc/nova/api-paste.ini`  \r\n\r\n`[filter:authtoken]`  \r\n`paste.filter_factory = keystone.middleware.auth_token:filter_factory`  \r\n`auth_host = 192.168.0.9`  \r\n`auth_port = 35357`  \r\n`auth_protocol = http`  \r\n`admin_tenant_name = service`  \r\n`admin_user = nova`  \r\n`admin_password = openstack`  \r\n`signing_dirname = /tmp/keystone-signing-nova`  \r\n\r\n**Edit /etc/nova/nova-compute.conf file**  \r\n`vi /etc/nova/nova-compute.conf`  \r\n\r\n`[DEFAULT]`  \r\n`libvirt_type=kvm`  \r\n`libvirt_ovs_bridge=br-int`  \r\n`libvirt_vif_type=ethernet`  \r\n`libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver`  \r\n`libvirt_use_virtio_for_bridges=True`  \r\n\r\n**Modify the /etc/nova/nova.conf like this:**  \r\n`vi /etc/nova/nova.conf`  \r\n\r\n`[DEFAULT]`  \r\n` logdir=/var/log/nova`  \r\n` state_path=/var/lib/nova`  \r\n` lock_path=/run/lock/nova`  \r\n` verbose=True`  \r\n` api_paste_config=/etc/nova/api-paste.ini`  \r\n` scheduler_driver=nova.scheduler.simple.SimpleScheduler`  \r\n` s3_host=192.168.0.9`  \r\n` ec2_host=192.168.0.9`  \r\n` ec2_dmz_host=192.168.0.9`  \r\n` rabbit_host=192.168.0.9`  \r\n` cc_host=192.168.0.9`  \r\n` dmz_cidr=169.254.169.254/32`  \r\n` metadata_host=192.168.0.9`  \r\n` metadata_listen=0.0.0.0`  \r\n` nova_url=http://192.168.0.9:8774/v1.1/`  \r\n` sql_connection=mysql://nova:openstack@192.168.0.9/nova`  \r\n` ec2_url=http://192.168.0.9:8773/services/Cloud`  \r\n` root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf`  \r\n\r\n` # Authentication`  \r\n` use_deprecated_auth=false`  \r\n` auth_strategy=keystone`  \r\n` keystone_ec2_url=http://192.168.0.9:5000/v2.0/ec2tokens`  \r\n\r\n` # Imaging service`  \r\n` glance_api_servers=192.168.0.9:9292`  \r\n` image_service=nova.image.glance.GlanceImageService`  \r\n\r\n` # VNC configuration`  \r\n` novnc_enabled=true`  \r\n` novncproxy_base_url=http://192.168.0.130:6080/vnc_auto.html`  \r\n` novncproxy_port=6080`  \r\n` vncserver_proxyclient_address=192.168.0.11`  \r\n` vncserver_listen=0.0.0.0`  \r\n\r\n` # Network settings`  \r\n` network_api_class=nova.network.quantumv2.api.API`  \r\n` quantum_url=http://192.168.0.9:9696`  \r\n` quantum_auth_strategy=keystone`  \r\n` quantum_admin_tenant_name=service`  \r\n` quantum_admin_username=quantum`  \r\n` quantum_admin_password=openstack`  \r\n` quantum_admin_auth_url=http://192.168.0.9:35357/v2.0`  \r\n` libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver`  \r\n` linuxnet_interface_driver=nova.network.linux_net.LinuxOVSInterfaceDriver`  \r\n` firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver`  \r\n\r\n` # Compute`  \r\n` compute_driver=libvirt.LibvirtDriver`  \r\n\r\n` # Cinder`  \r\n` volume_api_class=nova.volume.cinder.API`  \r\n` osapi_volume_listen_port=5900`  \r\n\r\n**Restart nova-* services:**  \r\n`cd /etc/init.d/; for i in $( ls nova-* ); do service $i restart; done`  \r\n\r\n**Check for the smiling faces on nova-* services to confirm your installation:**  \r\n`nova-manage service list`  \r\n\r\n# Credits:\r\n1. [Official Guide: Basic Installation Guide for Ubuntu 12.04/12.10 (Folsom)](http://docs.openstack.org/folsom/basic-install/content/)\r\n2. [Cisco OpenStack Edition: Folsom Manual Install](http://docwiki.cisco.com/wiki/Cisco_OpenStack_Edition:_Folsom_Manual_Install)\r\n3. [Folsom + Quantum on GRE-Tunneling with 3 NIC](https://github.com/mseknibilel/OpenStack-Folsom-Install-guide/blob/stable/GRE/OpenStack_Folsom_Install_Guide_WebVersion.rst)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}